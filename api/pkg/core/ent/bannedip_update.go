// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/isutare412/bloated/api/pkg/core/ent/bannedip"
	"github.com/isutare412/bloated/api/pkg/core/ent/predicate"
)

// BannedIPUpdate is the builder for updating BannedIP entities.
type BannedIPUpdate struct {
	config
	hooks    []Hook
	mutation *BannedIPMutation
}

// Where appends a list predicates to the BannedIPUpdate builder.
func (biu *BannedIPUpdate) Where(ps ...predicate.BannedIP) *BannedIPUpdate {
	biu.mutation.Where(ps...)
	return biu
}

// SetUpdateTime sets the "update_time" field.
func (biu *BannedIPUpdate) SetUpdateTime(t time.Time) *BannedIPUpdate {
	biu.mutation.SetUpdateTime(t)
	return biu
}

// SetIP sets the "ip" field.
func (biu *BannedIPUpdate) SetIP(s string) *BannedIPUpdate {
	biu.mutation.SetIP(s)
	return biu
}

// SetCountry sets the "country" field.
func (biu *BannedIPUpdate) SetCountry(s string) *BannedIPUpdate {
	biu.mutation.SetCountry(s)
	return biu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (biu *BannedIPUpdate) SetNillableCountry(s *string) *BannedIPUpdate {
	if s != nil {
		biu.SetCountry(*s)
	}
	return biu
}

// ClearCountry clears the value of the "country" field.
func (biu *BannedIPUpdate) ClearCountry() *BannedIPUpdate {
	biu.mutation.ClearCountry()
	return biu
}

// Mutation returns the BannedIPMutation object of the builder.
func (biu *BannedIPUpdate) Mutation() *BannedIPMutation {
	return biu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BannedIPUpdate) Save(ctx context.Context) (int, error) {
	biu.defaults()
	return withHooks(ctx, biu.sqlSave, biu.mutation, biu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BannedIPUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BannedIPUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BannedIPUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biu *BannedIPUpdate) defaults() {
	if _, ok := biu.mutation.UpdateTime(); !ok {
		v := bannedip.UpdateDefaultUpdateTime()
		biu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biu *BannedIPUpdate) check() error {
	if v, ok := biu.mutation.IP(); ok {
		if err := bannedip.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "BannedIP.ip": %w`, err)}
		}
	}
	if v, ok := biu.mutation.Country(); ok {
		if err := bannedip.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "BannedIP.country": %w`, err)}
		}
	}
	return nil
}

func (biu *BannedIPUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := biu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bannedip.Table, bannedip.Columns, sqlgraph.NewFieldSpec(bannedip.FieldID, field.TypeInt))
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.UpdateTime(); ok {
		_spec.SetField(bannedip.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := biu.mutation.IP(); ok {
		_spec.SetField(bannedip.FieldIP, field.TypeString, value)
	}
	if value, ok := biu.mutation.Country(); ok {
		_spec.SetField(bannedip.FieldCountry, field.TypeString, value)
	}
	if biu.mutation.CountryCleared() {
		_spec.ClearField(bannedip.FieldCountry, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bannedip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biu.mutation.done = true
	return n, nil
}

// BannedIPUpdateOne is the builder for updating a single BannedIP entity.
type BannedIPUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BannedIPMutation
}

// SetUpdateTime sets the "update_time" field.
func (biuo *BannedIPUpdateOne) SetUpdateTime(t time.Time) *BannedIPUpdateOne {
	biuo.mutation.SetUpdateTime(t)
	return biuo
}

// SetIP sets the "ip" field.
func (biuo *BannedIPUpdateOne) SetIP(s string) *BannedIPUpdateOne {
	biuo.mutation.SetIP(s)
	return biuo
}

// SetCountry sets the "country" field.
func (biuo *BannedIPUpdateOne) SetCountry(s string) *BannedIPUpdateOne {
	biuo.mutation.SetCountry(s)
	return biuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (biuo *BannedIPUpdateOne) SetNillableCountry(s *string) *BannedIPUpdateOne {
	if s != nil {
		biuo.SetCountry(*s)
	}
	return biuo
}

// ClearCountry clears the value of the "country" field.
func (biuo *BannedIPUpdateOne) ClearCountry() *BannedIPUpdateOne {
	biuo.mutation.ClearCountry()
	return biuo
}

// Mutation returns the BannedIPMutation object of the builder.
func (biuo *BannedIPUpdateOne) Mutation() *BannedIPMutation {
	return biuo.mutation
}

// Where appends a list predicates to the BannedIPUpdate builder.
func (biuo *BannedIPUpdateOne) Where(ps ...predicate.BannedIP) *BannedIPUpdateOne {
	biuo.mutation.Where(ps...)
	return biuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biuo *BannedIPUpdateOne) Select(field string, fields ...string) *BannedIPUpdateOne {
	biuo.fields = append([]string{field}, fields...)
	return biuo
}

// Save executes the query and returns the updated BannedIP entity.
func (biuo *BannedIPUpdateOne) Save(ctx context.Context) (*BannedIP, error) {
	biuo.defaults()
	return withHooks(ctx, biuo.sqlSave, biuo.mutation, biuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BannedIPUpdateOne) SaveX(ctx context.Context) *BannedIP {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BannedIPUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BannedIPUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biuo *BannedIPUpdateOne) defaults() {
	if _, ok := biuo.mutation.UpdateTime(); !ok {
		v := bannedip.UpdateDefaultUpdateTime()
		biuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biuo *BannedIPUpdateOne) check() error {
	if v, ok := biuo.mutation.IP(); ok {
		if err := bannedip.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "BannedIP.ip": %w`, err)}
		}
	}
	if v, ok := biuo.mutation.Country(); ok {
		if err := bannedip.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "BannedIP.country": %w`, err)}
		}
	}
	return nil
}

func (biuo *BannedIPUpdateOne) sqlSave(ctx context.Context) (_node *BannedIP, err error) {
	if err := biuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bannedip.Table, bannedip.Columns, sqlgraph.NewFieldSpec(bannedip.FieldID, field.TypeInt))
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BannedIP.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bannedip.FieldID)
		for _, f := range fields {
			if !bannedip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bannedip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.UpdateTime(); ok {
		_spec.SetField(bannedip.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.IP(); ok {
		_spec.SetField(bannedip.FieldIP, field.TypeString, value)
	}
	if value, ok := biuo.mutation.Country(); ok {
		_spec.SetField(bannedip.FieldCountry, field.TypeString, value)
	}
	if biuo.mutation.CountryCleared() {
		_spec.ClearField(bannedip.FieldCountry, field.TypeString)
	}
	_node = &BannedIP{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bannedip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biuo.mutation.done = true
	return _node, nil
}

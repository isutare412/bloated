// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/isutare412/bloated/api/pkg/core/port (interfaces: AuthService,TodoService,IPService)

// Package portmock is a generated GoMock package.
package portmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ent "github.com/isutare412/bloated/api/pkg/core/ent"
	model "github.com/isutare412/bloated/api/pkg/core/model"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// IssueCustomToken mocks base method.
func (m *MockAuthService) IssueCustomToken(arg0 context.Context, arg1 model.CustomToken) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCustomToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCustomToken indicates an expected call of IssueCustomToken.
func (mr *MockAuthServiceMockRecorder) IssueCustomToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCustomToken", reflect.TypeOf((*MockAuthService)(nil).IssueCustomToken), arg0, arg1)
}

// IssueCustomTokenFromGoogle mocks base method.
func (m *MockAuthService) IssueCustomTokenFromGoogle(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCustomTokenFromGoogle", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCustomTokenFromGoogle indicates an expected call of IssueCustomTokenFromGoogle.
func (mr *MockAuthServiceMockRecorder) IssueCustomTokenFromGoogle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCustomTokenFromGoogle", reflect.TypeOf((*MockAuthService)(nil).IssueCustomTokenFromGoogle), arg0, arg1)
}

// VerifyCustomToken mocks base method.
func (m *MockAuthService) VerifyCustomToken(arg0 context.Context, arg1 string) (model.CustomToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCustomToken", arg0, arg1)
	ret0, _ := ret[0].(model.CustomToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCustomToken indicates an expected call of VerifyCustomToken.
func (mr *MockAuthServiceMockRecorder) VerifyCustomToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCustomToken", reflect.TypeOf((*MockAuthService)(nil).VerifyCustomToken), arg0, arg1)
}

// MockTodoService is a mock of TodoService interface.
type MockTodoService struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServiceMockRecorder
}

// MockTodoServiceMockRecorder is the mock recorder for MockTodoService.
type MockTodoServiceMockRecorder struct {
	mock *MockTodoService
}

// NewMockTodoService creates a new mock instance.
func NewMockTodoService(ctrl *gomock.Controller) *MockTodoService {
	mock := &MockTodoService{ctrl: ctrl}
	mock.recorder = &MockTodoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoService) EXPECT() *MockTodoServiceMockRecorder {
	return m.recorder
}

// AddTodo mocks base method.
func (m *MockTodoService) AddTodo(arg0 context.Context, arg1 *ent.Todo) (*ent.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodo", arg0, arg1)
	ret0, _ := ret[0].(*ent.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTodo indicates an expected call of AddTodo.
func (mr *MockTodoServiceMockRecorder) AddTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodo", reflect.TypeOf((*MockTodoService)(nil).AddTodo), arg0, arg1)
}

// DeleteTodo mocks base method.
func (m *MockTodoService) DeleteTodo(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoServiceMockRecorder) DeleteTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoService)(nil).DeleteTodo), arg0, arg1)
}

// TodosOfUser mocks base method.
func (m *MockTodoService) TodosOfUser(arg0 context.Context, arg1 string) ([]*ent.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TodosOfUser", arg0, arg1)
	ret0, _ := ret[0].([]*ent.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TodosOfUser indicates an expected call of TodosOfUser.
func (mr *MockTodoServiceMockRecorder) TodosOfUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TodosOfUser", reflect.TypeOf((*MockTodoService)(nil).TodosOfUser), arg0, arg1)
}

// MockIPService is a mock of IPService interface.
type MockIPService struct {
	ctrl     *gomock.Controller
	recorder *MockIPServiceMockRecorder
}

// MockIPServiceMockRecorder is the mock recorder for MockIPService.
type MockIPServiceMockRecorder struct {
	mock *MockIPService
}

// NewMockIPService creates a new mock instance.
func NewMockIPService(ctrl *gomock.Controller) *MockIPService {
	mock := &MockIPService{ctrl: ctrl}
	mock.recorder = &MockIPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPService) EXPECT() *MockIPServiceMockRecorder {
	return m.recorder
}

// AllBannedIPs mocks base method.
func (m *MockIPService) AllBannedIPs(arg0 context.Context) ([]*ent.BannedIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllBannedIPs", arg0)
	ret0, _ := ret[0].([]*ent.BannedIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllBannedIPs indicates an expected call of AllBannedIPs.
func (mr *MockIPServiceMockRecorder) AllBannedIPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllBannedIPs", reflect.TypeOf((*MockIPService)(nil).AllBannedIPs), arg0)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/isutare412/bloated/api/pkg/core/ent/tokenhistory"
	"github.com/isutare412/bloated/api/pkg/core/enum"
)

// TokenHistoryCreate is the builder for creating a TokenHistory entity.
type TokenHistoryCreate struct {
	config
	mutation *TokenHistoryMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (thc *TokenHistoryCreate) SetCreateTime(t time.Time) *TokenHistoryCreate {
	thc.mutation.SetCreateTime(t)
	return thc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (thc *TokenHistoryCreate) SetNillableCreateTime(t *time.Time) *TokenHistoryCreate {
	if t != nil {
		thc.SetCreateTime(*t)
	}
	return thc
}

// SetUpdateTime sets the "update_time" field.
func (thc *TokenHistoryCreate) SetUpdateTime(t time.Time) *TokenHistoryCreate {
	thc.mutation.SetUpdateTime(t)
	return thc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (thc *TokenHistoryCreate) SetNillableUpdateTime(t *time.Time) *TokenHistoryCreate {
	if t != nil {
		thc.SetUpdateTime(*t)
	}
	return thc
}

// SetEmail sets the "email" field.
func (thc *TokenHistoryCreate) SetEmail(s string) *TokenHistoryCreate {
	thc.mutation.SetEmail(s)
	return thc
}

// SetUserName sets the "user_name" field.
func (thc *TokenHistoryCreate) SetUserName(s string) *TokenHistoryCreate {
	thc.mutation.SetUserName(s)
	return thc
}

// SetIssuedFrom sets the "issued_from" field.
func (thc *TokenHistoryCreate) SetIssuedFrom(e enum.Issuer) *TokenHistoryCreate {
	thc.mutation.SetIssuedFrom(e)
	return thc
}

// Mutation returns the TokenHistoryMutation object of the builder.
func (thc *TokenHistoryCreate) Mutation() *TokenHistoryMutation {
	return thc.mutation
}

// Save creates the TokenHistory in the database.
func (thc *TokenHistoryCreate) Save(ctx context.Context) (*TokenHistory, error) {
	thc.defaults()
	return withHooks(ctx, thc.sqlSave, thc.mutation, thc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (thc *TokenHistoryCreate) SaveX(ctx context.Context) *TokenHistory {
	v, err := thc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thc *TokenHistoryCreate) Exec(ctx context.Context) error {
	_, err := thc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thc *TokenHistoryCreate) ExecX(ctx context.Context) {
	if err := thc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thc *TokenHistoryCreate) defaults() {
	if _, ok := thc.mutation.CreateTime(); !ok {
		v := tokenhistory.DefaultCreateTime()
		thc.mutation.SetCreateTime(v)
	}
	if _, ok := thc.mutation.UpdateTime(); !ok {
		v := tokenhistory.DefaultUpdateTime()
		thc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thc *TokenHistoryCreate) check() error {
	if _, ok := thc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TokenHistory.create_time"`)}
	}
	if _, ok := thc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TokenHistory.update_time"`)}
	}
	if _, ok := thc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "TokenHistory.email"`)}
	}
	if v, ok := thc.mutation.Email(); ok {
		if err := tokenhistory.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "TokenHistory.email": %w`, err)}
		}
	}
	if _, ok := thc.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`ent: missing required field "TokenHistory.user_name"`)}
	}
	if v, ok := thc.mutation.UserName(); ok {
		if err := tokenhistory.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`ent: validator failed for field "TokenHistory.user_name": %w`, err)}
		}
	}
	if _, ok := thc.mutation.IssuedFrom(); !ok {
		return &ValidationError{Name: "issued_from", err: errors.New(`ent: missing required field "TokenHistory.issued_from"`)}
	}
	if v, ok := thc.mutation.IssuedFrom(); ok {
		if err := tokenhistory.IssuedFromValidator(v); err != nil {
			return &ValidationError{Name: "issued_from", err: fmt.Errorf(`ent: validator failed for field "TokenHistory.issued_from": %w`, err)}
		}
	}
	return nil
}

func (thc *TokenHistoryCreate) sqlSave(ctx context.Context) (*TokenHistory, error) {
	if err := thc.check(); err != nil {
		return nil, err
	}
	_node, _spec := thc.createSpec()
	if err := sqlgraph.CreateNode(ctx, thc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	thc.mutation.id = &_node.ID
	thc.mutation.done = true
	return _node, nil
}

func (thc *TokenHistoryCreate) createSpec() (*TokenHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TokenHistory{config: thc.config}
		_spec = sqlgraph.NewCreateSpec(tokenhistory.Table, sqlgraph.NewFieldSpec(tokenhistory.FieldID, field.TypeInt))
	)
	if value, ok := thc.mutation.CreateTime(); ok {
		_spec.SetField(tokenhistory.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := thc.mutation.UpdateTime(); ok {
		_spec.SetField(tokenhistory.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := thc.mutation.Email(); ok {
		_spec.SetField(tokenhistory.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := thc.mutation.UserName(); ok {
		_spec.SetField(tokenhistory.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := thc.mutation.IssuedFrom(); ok {
		_spec.SetField(tokenhistory.FieldIssuedFrom, field.TypeEnum, value)
		_node.IssuedFrom = value
	}
	return _node, _spec
}

// TokenHistoryCreateBulk is the builder for creating many TokenHistory entities in bulk.
type TokenHistoryCreateBulk struct {
	config
	builders []*TokenHistoryCreate
}

// Save creates the TokenHistory entities in the database.
func (thcb *TokenHistoryCreateBulk) Save(ctx context.Context) ([]*TokenHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(thcb.builders))
	nodes := make([]*TokenHistory, len(thcb.builders))
	mutators := make([]Mutator, len(thcb.builders))
	for i := range thcb.builders {
		func(i int, root context.Context) {
			builder := thcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, thcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, thcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, thcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (thcb *TokenHistoryCreateBulk) SaveX(ctx context.Context) []*TokenHistory {
	v, err := thcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thcb *TokenHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := thcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thcb *TokenHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := thcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/isutare412/bloated/api/pkg/core/ent/bannedip"
)

// BannedIPCreate is the builder for creating a BannedIP entity.
type BannedIPCreate struct {
	config
	mutation *BannedIPMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (bic *BannedIPCreate) SetCreateTime(t time.Time) *BannedIPCreate {
	bic.mutation.SetCreateTime(t)
	return bic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bic *BannedIPCreate) SetNillableCreateTime(t *time.Time) *BannedIPCreate {
	if t != nil {
		bic.SetCreateTime(*t)
	}
	return bic
}

// SetUpdateTime sets the "update_time" field.
func (bic *BannedIPCreate) SetUpdateTime(t time.Time) *BannedIPCreate {
	bic.mutation.SetUpdateTime(t)
	return bic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bic *BannedIPCreate) SetNillableUpdateTime(t *time.Time) *BannedIPCreate {
	if t != nil {
		bic.SetUpdateTime(*t)
	}
	return bic
}

// SetIP sets the "ip" field.
func (bic *BannedIPCreate) SetIP(s string) *BannedIPCreate {
	bic.mutation.SetIP(s)
	return bic
}

// SetCountry sets the "country" field.
func (bic *BannedIPCreate) SetCountry(s string) *BannedIPCreate {
	bic.mutation.SetCountry(s)
	return bic
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (bic *BannedIPCreate) SetNillableCountry(s *string) *BannedIPCreate {
	if s != nil {
		bic.SetCountry(*s)
	}
	return bic
}

// Mutation returns the BannedIPMutation object of the builder.
func (bic *BannedIPCreate) Mutation() *BannedIPMutation {
	return bic.mutation
}

// Save creates the BannedIP in the database.
func (bic *BannedIPCreate) Save(ctx context.Context) (*BannedIP, error) {
	bic.defaults()
	return withHooks(ctx, bic.sqlSave, bic.mutation, bic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bic *BannedIPCreate) SaveX(ctx context.Context) *BannedIP {
	v, err := bic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bic *BannedIPCreate) Exec(ctx context.Context) error {
	_, err := bic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bic *BannedIPCreate) ExecX(ctx context.Context) {
	if err := bic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bic *BannedIPCreate) defaults() {
	if _, ok := bic.mutation.CreateTime(); !ok {
		v := bannedip.DefaultCreateTime()
		bic.mutation.SetCreateTime(v)
	}
	if _, ok := bic.mutation.UpdateTime(); !ok {
		v := bannedip.DefaultUpdateTime()
		bic.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bic *BannedIPCreate) check() error {
	if _, ok := bic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BannedIP.create_time"`)}
	}
	if _, ok := bic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BannedIP.update_time"`)}
	}
	if _, ok := bic.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "BannedIP.ip"`)}
	}
	if v, ok := bic.mutation.IP(); ok {
		if err := bannedip.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "BannedIP.ip": %w`, err)}
		}
	}
	if v, ok := bic.mutation.Country(); ok {
		if err := bannedip.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "BannedIP.country": %w`, err)}
		}
	}
	return nil
}

func (bic *BannedIPCreate) sqlSave(ctx context.Context) (*BannedIP, error) {
	if err := bic.check(); err != nil {
		return nil, err
	}
	_node, _spec := bic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bic.mutation.id = &_node.ID
	bic.mutation.done = true
	return _node, nil
}

func (bic *BannedIPCreate) createSpec() (*BannedIP, *sqlgraph.CreateSpec) {
	var (
		_node = &BannedIP{config: bic.config}
		_spec = sqlgraph.NewCreateSpec(bannedip.Table, sqlgraph.NewFieldSpec(bannedip.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bic.conflict
	if value, ok := bic.mutation.CreateTime(); ok {
		_spec.SetField(bannedip.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bic.mutation.UpdateTime(); ok {
		_spec.SetField(bannedip.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bic.mutation.IP(); ok {
		_spec.SetField(bannedip.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := bic.mutation.Country(); ok {
		_spec.SetField(bannedip.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BannedIP.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BannedIPUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bic *BannedIPCreate) OnConflict(opts ...sql.ConflictOption) *BannedIPUpsertOne {
	bic.conflict = opts
	return &BannedIPUpsertOne{
		create: bic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BannedIP.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bic *BannedIPCreate) OnConflictColumns(columns ...string) *BannedIPUpsertOne {
	bic.conflict = append(bic.conflict, sql.ConflictColumns(columns...))
	return &BannedIPUpsertOne{
		create: bic,
	}
}

type (
	// BannedIPUpsertOne is the builder for "upsert"-ing
	//  one BannedIP node.
	BannedIPUpsertOne struct {
		create *BannedIPCreate
	}

	// BannedIPUpsert is the "OnConflict" setter.
	BannedIPUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *BannedIPUpsert) SetUpdateTime(v time.Time) *BannedIPUpsert {
	u.Set(bannedip.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BannedIPUpsert) UpdateUpdateTime() *BannedIPUpsert {
	u.SetExcluded(bannedip.FieldUpdateTime)
	return u
}

// SetIP sets the "ip" field.
func (u *BannedIPUpsert) SetIP(v string) *BannedIPUpsert {
	u.Set(bannedip.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *BannedIPUpsert) UpdateIP() *BannedIPUpsert {
	u.SetExcluded(bannedip.FieldIP)
	return u
}

// SetCountry sets the "country" field.
func (u *BannedIPUpsert) SetCountry(v string) *BannedIPUpsert {
	u.Set(bannedip.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *BannedIPUpsert) UpdateCountry() *BannedIPUpsert {
	u.SetExcluded(bannedip.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *BannedIPUpsert) ClearCountry() *BannedIPUpsert {
	u.SetNull(bannedip.FieldCountry)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BannedIP.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BannedIPUpsertOne) UpdateNewValues() *BannedIPUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(bannedip.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BannedIP.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BannedIPUpsertOne) Ignore() *BannedIPUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BannedIPUpsertOne) DoNothing() *BannedIPUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BannedIPCreate.OnConflict
// documentation for more info.
func (u *BannedIPUpsertOne) Update(set func(*BannedIPUpsert)) *BannedIPUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BannedIPUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BannedIPUpsertOne) SetUpdateTime(v time.Time) *BannedIPUpsertOne {
	return u.Update(func(s *BannedIPUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BannedIPUpsertOne) UpdateUpdateTime() *BannedIPUpsertOne {
	return u.Update(func(s *BannedIPUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIP sets the "ip" field.
func (u *BannedIPUpsertOne) SetIP(v string) *BannedIPUpsertOne {
	return u.Update(func(s *BannedIPUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *BannedIPUpsertOne) UpdateIP() *BannedIPUpsertOne {
	return u.Update(func(s *BannedIPUpsert) {
		s.UpdateIP()
	})
}

// SetCountry sets the "country" field.
func (u *BannedIPUpsertOne) SetCountry(v string) *BannedIPUpsertOne {
	return u.Update(func(s *BannedIPUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *BannedIPUpsertOne) UpdateCountry() *BannedIPUpsertOne {
	return u.Update(func(s *BannedIPUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *BannedIPUpsertOne) ClearCountry() *BannedIPUpsertOne {
	return u.Update(func(s *BannedIPUpsert) {
		s.ClearCountry()
	})
}

// Exec executes the query.
func (u *BannedIPUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BannedIPCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BannedIPUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BannedIPUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BannedIPUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BannedIPCreateBulk is the builder for creating many BannedIP entities in bulk.
type BannedIPCreateBulk struct {
	config
	builders []*BannedIPCreate
	conflict []sql.ConflictOption
}

// Save creates the BannedIP entities in the database.
func (bicb *BannedIPCreateBulk) Save(ctx context.Context) ([]*BannedIP, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bicb.builders))
	nodes := make([]*BannedIP, len(bicb.builders))
	mutators := make([]Mutator, len(bicb.builders))
	for i := range bicb.builders {
		func(i int, root context.Context) {
			builder := bicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BannedIPMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bicb *BannedIPCreateBulk) SaveX(ctx context.Context) []*BannedIP {
	v, err := bicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bicb *BannedIPCreateBulk) Exec(ctx context.Context) error {
	_, err := bicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicb *BannedIPCreateBulk) ExecX(ctx context.Context) {
	if err := bicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BannedIP.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BannedIPUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bicb *BannedIPCreateBulk) OnConflict(opts ...sql.ConflictOption) *BannedIPUpsertBulk {
	bicb.conflict = opts
	return &BannedIPUpsertBulk{
		create: bicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BannedIP.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bicb *BannedIPCreateBulk) OnConflictColumns(columns ...string) *BannedIPUpsertBulk {
	bicb.conflict = append(bicb.conflict, sql.ConflictColumns(columns...))
	return &BannedIPUpsertBulk{
		create: bicb,
	}
}

// BannedIPUpsertBulk is the builder for "upsert"-ing
// a bulk of BannedIP nodes.
type BannedIPUpsertBulk struct {
	create *BannedIPCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BannedIP.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BannedIPUpsertBulk) UpdateNewValues() *BannedIPUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(bannedip.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BannedIP.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BannedIPUpsertBulk) Ignore() *BannedIPUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BannedIPUpsertBulk) DoNothing() *BannedIPUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BannedIPCreateBulk.OnConflict
// documentation for more info.
func (u *BannedIPUpsertBulk) Update(set func(*BannedIPUpsert)) *BannedIPUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BannedIPUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BannedIPUpsertBulk) SetUpdateTime(v time.Time) *BannedIPUpsertBulk {
	return u.Update(func(s *BannedIPUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BannedIPUpsertBulk) UpdateUpdateTime() *BannedIPUpsertBulk {
	return u.Update(func(s *BannedIPUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIP sets the "ip" field.
func (u *BannedIPUpsertBulk) SetIP(v string) *BannedIPUpsertBulk {
	return u.Update(func(s *BannedIPUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *BannedIPUpsertBulk) UpdateIP() *BannedIPUpsertBulk {
	return u.Update(func(s *BannedIPUpsert) {
		s.UpdateIP()
	})
}

// SetCountry sets the "country" field.
func (u *BannedIPUpsertBulk) SetCountry(v string) *BannedIPUpsertBulk {
	return u.Update(func(s *BannedIPUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *BannedIPUpsertBulk) UpdateCountry() *BannedIPUpsertBulk {
	return u.Update(func(s *BannedIPUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *BannedIPUpsertBulk) ClearCountry() *BannedIPUpsertBulk {
	return u.Update(func(s *BannedIPUpsert) {
		s.ClearCountry()
	})
}

// Exec executes the query.
func (u *BannedIPUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BannedIPCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BannedIPCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BannedIPUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

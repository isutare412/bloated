// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/isutare412/bloated/api/pkg/core/ent/tokenhistory"
	"github.com/isutare412/bloated/api/pkg/core/enum"
)

// TokenHistory is the model entity for the TokenHistory schema.
type TokenHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// UserName holds the value of the "user_name" field.
	UserName string `json:"user_name,omitempty"`
	// IssuedFrom holds the value of the "issued_from" field.
	IssuedFrom   enum.Issuer `json:"issued_from,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TokenHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tokenhistory.FieldID:
			values[i] = new(sql.NullInt64)
		case tokenhistory.FieldEmail, tokenhistory.FieldUserName, tokenhistory.FieldIssuedFrom:
			values[i] = new(sql.NullString)
		case tokenhistory.FieldCreateTime, tokenhistory.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TokenHistory fields.
func (th *TokenHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tokenhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			th.ID = int(value.Int64)
		case tokenhistory.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				th.CreateTime = value.Time
			}
		case tokenhistory.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				th.UpdateTime = value.Time
			}
		case tokenhistory.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				th.Email = value.String
			}
		case tokenhistory.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				th.UserName = value.String
			}
		case tokenhistory.FieldIssuedFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issued_from", values[i])
			} else if value.Valid {
				th.IssuedFrom = enum.Issuer(value.String)
			}
		default:
			th.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TokenHistory.
// This includes values selected through modifiers, order, etc.
func (th *TokenHistory) Value(name string) (ent.Value, error) {
	return th.selectValues.Get(name)
}

// Update returns a builder for updating this TokenHistory.
// Note that you need to call TokenHistory.Unwrap() before calling this method if this TokenHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (th *TokenHistory) Update() *TokenHistoryUpdateOne {
	return NewTokenHistoryClient(th.config).UpdateOne(th)
}

// Unwrap unwraps the TokenHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (th *TokenHistory) Unwrap() *TokenHistory {
	_tx, ok := th.config.driver.(*txDriver)
	if !ok {
		panic("ent: TokenHistory is not a transactional entity")
	}
	th.config.driver = _tx.drv
	return th
}

// String implements the fmt.Stringer.
func (th *TokenHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TokenHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", th.ID))
	builder.WriteString("create_time=")
	builder.WriteString(th.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(th.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(th.Email)
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(th.UserName)
	builder.WriteString(", ")
	builder.WriteString("issued_from=")
	builder.WriteString(fmt.Sprintf("%v", th.IssuedFrom))
	builder.WriteByte(')')
	return builder.String()
}

// TokenHistories is a parsable slice of TokenHistory.
type TokenHistories []*TokenHistory
